module;

import RuntimeError;
import TokenType;

#include <fmt/core.h>

#include <cstdlib>
#include <string>

export module Lox;

export
namespace lox {
bool hadError = false;
bool hadRuntimeError = false;

auto report(std::size_t line, const std::string& where, const std::string& message) -> void {
  using namespace fmt;

  print("[line {}] Error {}: {}\n", line, where, message);
  hadError = true;
}

auto error(const Token& token, const std::string& message) -> void {
  using enum TokenType;

  if (token.type == LOX_EOF) {
    report(token.line, " at end", message);
  } else {
    report(token.line, " at '" + token.lexeme + "'", message);
  }
}

auto error(std::size_t line, const std::string& message) -> void {
  report(line, "", message);
}

auto runtimeError(const RuntimeError& error) -> void {
  using namespace fmt;

  print("{} \n[line {} ]", error.what(), error.token.line);
  hadRuntimeError = true;
}
}
